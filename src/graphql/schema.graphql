directive @isAuth on FIELD_DEFINITION
directive @recaptcha on FIELD_DEFINITION
directive @protect(roles: [Role]) on FIELD_DEFINITION

enum Role {
  ADMIN
  USUARIO
}

scalar DateTime
scalar Email

type Booking {
  _id: ID!
  event: Event!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Event {
  _id: ID!
  title: String!
  description: String!
  price: Float!
  date: DateTime!
  creator: User!
}

type EventsConnection {
  pageInfo: PageInfo!
  edges: [Event]
}

type BookingsConnection {
  pageInfo: PageInfo!
  edges: [Booking]
}

type PageInfo {
  hasNextPage: Boolean!
  cursor: String!
}

type User {
  _id: ID!
  email: Email!
}

type AuthData {
  token: String!
}

input EventInput {
  title: String!
  description: String!
  price: Float!
  date: DateTime!
}

input PageInput {
  pageSize: Int
  cursor: String
}

input UpdateEventInput {
  _id: ID!
  title: String
  description: String
  price: Float
  date: DateTime
}

type Query {
  getEvents(page: PageInput): EventsConnection

  getBookings(page: PageInput): BookingsConnection
    @protect(roles: [USUARIO])

  login(email: Email!, password: String!): AuthData! @recaptcha

  myEvents(page: PageInput): EventsConnection

  status: Boolean
}

type Mutation {
  createEvent(eventInput: EventInput!): Event! @isAuth

  updateEvent(event: UpdateEventInput!): Event! @isAuth

  createUser(email: Email!, password: String!): User @recaptcha

  bookEvent(eventId: ID!): Booking! @isAuth

  cancelBooking(bookingId: ID!): Event! @isAuth

  turnOn(relay: Int!): Boolean

  turnOff(relay: Int!): Boolean
}

type NewValue {
  name: String!
  value: Float!
}

type Subscription {
  newEvent: Event!

  updatedEvent: Event!

  newValue: NewValue!
}
